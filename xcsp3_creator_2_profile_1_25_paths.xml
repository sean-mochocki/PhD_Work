<instance format="XCSP3" type="COP">
  <variables>
    <array id="kn" note="All necessary variables for XCSP3 are defined, begin creating XCSP3 file - Create a variable that defines the knowledge nodes to be covered" size="[20]"> 0 1 </array>
    <array id="lo" note="Create a variable that defines the available Learning Objects" size="[72]"> 0 1 </array>
    <array id="kp" note="Create a variable that defines the knowledge paths available" size="[18]"> 0 1 </array>
    <var id="adaptivity_score" note="# The goal of this next section is to define an adaptivity score that we can maximize."> 0..4999 </var>
  </variables>
  <constraints>
    <intension> eq(add(kp[0],kp[1],kp[2],kp[3],kp[4],kp[5],kp[6],kp[7],kp[8],kp[9],kp[10],kp[11],kp[12],kp[13],kp[14],kp[15],kp[16],kp[17]),1) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[5],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[5],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[10],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[10],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[10],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[10],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[10],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[10],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[11],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[11],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[11],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[11],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[11],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[12],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[12],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[12],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[12],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[12],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[13],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[13],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[13],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[13],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[14],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[14],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[14],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[14],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[15],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[15],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[15],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[15],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[16],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[16],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[16],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[17],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[17],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[17],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[0],1),and(eq(kn[3],0),eq(kn[7],0),eq(kn[8],0),eq(kn[12],0),eq(kn[13],0),eq(kn[14],0),eq(kn[15],0),eq(kn[16],0),eq(kn[17],0))) </intension>
    <intension> imp(eq(kp[1],1),and(eq(kn[1],0),eq(kn[2],0),eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[7],0),eq(kn[9],0),eq(kn[10],0),eq(kn[12],0))) </intension>
    <intension> imp(eq(kp[2],1),and(eq(kn[1],0),eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[6],0),eq(kn[8],0),eq(kn[10],0),eq(kn[12],0),eq(kn[17],0))) </intension>
    <intension> imp(eq(kp[3],1),and(eq(kn[1],0),eq(kn[2],0),eq(kn[3],0),eq(kn[8],0),eq(kn[9],0),eq(kn[12],0),eq(kn[14],0),eq(kn[15],0),eq(kn[17],0),eq(kn[18],0))) </intension>
    <intension> imp(eq(kp[4],1),and(eq(kn[2],0),eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[6],0),eq(kn[7],0),eq(kn[8],0),eq(kn[9],0),eq(kn[10],0),eq(kn[12],0),eq(kn[13],0))) </intension>
    <intension> imp(eq(kp[5],1),and(eq(kn[1],0),eq(kn[2],0),eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[6],0),eq(kn[9],0),eq(kn[10],0),eq(kn[14],0),eq(kn[17],0),eq(kn[18],0))) </intension>
    <intension> imp(eq(kp[6],1),and(eq(kn[2],0),eq(kn[4],0),eq(kn[5],0),eq(kn[6],0),eq(kn[7],0),eq(kn[8],0),eq(kn[9],0),eq(kn[10],0),eq(kn[12],0),eq(kn[13],0),eq(kn[14],0),eq(kn[16],0))) </intension>
    <intension> imp(eq(kp[7],1),and(eq(kn[3],0),eq(kn[5],0),eq(kn[6],0),eq(kn[8],0),eq(kn[9],0),eq(kn[11],0),eq(kn[12],0),eq(kn[13],0),eq(kn[15],0),eq(kn[16],0),eq(kn[17],0),eq(kn[18],0))) </intension>
    <intension> imp(eq(kp[8],1),and(eq(kn[1],0),eq(kn[2],0),eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[7],0),eq(kn[9],0),eq(kn[10],0),eq(kn[12],0),eq(kn[13],0),eq(kn[15],0),eq(kn[16],0))) </intension>
    <intension> imp(eq(kp[9],1),and(eq(kn[1],0),eq(kn[2],0),eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[6],0),eq(kn[7],0),eq(kn[9],0),eq(kn[10],0),eq(kn[12],0),eq(kn[13],0),eq(kn[14],0),eq(kn[16],0),eq(kn[18],0))) </intension>
    <intension> imp(eq(kp[10],1),and(eq(kn[1],0),eq(kn[2],0),eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[6],0),eq(kn[7],0),eq(kn[9],0),eq(kn[10],0),eq(kn[13],0),eq(kn[14],0),eq(kn[16],0),eq(kn[17],0),eq(kn[18],0))) </intension>
    <intension> imp(eq(kp[11],1),and(eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[7],0),eq(kn[8],0),eq(kn[9],0),eq(kn[10],0),eq(kn[11],0),eq(kn[12],0),eq(kn[13],0),eq(kn[14],0),eq(kn[15],0),eq(kn[16],0),eq(kn[17],0),eq(kn[18],0))) </intension>
    <intension> imp(eq(kp[12],1),and(eq(kn[1],0),eq(kn[2],0),eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[7],0),eq(kn[8],0),eq(kn[9],0),eq(kn[10],0),eq(kn[11],0),eq(kn[12],0),eq(kn[13],0),eq(kn[15],0),eq(kn[16],0),eq(kn[17],0))) </intension>
    <intension> imp(eq(kp[13],1),and(eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[6],0),eq(kn[7],0),eq(kn[8],0),eq(kn[9],0),eq(kn[10],0),eq(kn[11],0),eq(kn[12],0),eq(kn[13],0),eq(kn[14],0),eq(kn[15],0),eq(kn[16],0),eq(kn[17],0),eq(kn[18],0))) </intension>
    <intension> imp(eq(kp[14],1),and(eq(kn[1],0),eq(kn[2],0),eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[6],0),eq(kn[7],0),eq(kn[9],0),eq(kn[10],0),eq(kn[12],0),eq(kn[13],0),eq(kn[14],0),eq(kn[15],0),eq(kn[16],0),eq(kn[17],0),eq(kn[18],0))) </intension>
    <intension> imp(eq(kp[15],1),and(eq(kn[1],0),eq(kn[2],0),eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[6],0),eq(kn[7],0),eq(kn[8],0),eq(kn[9],0),eq(kn[10],0),eq(kn[11],0),eq(kn[12],0),eq(kn[13],0),eq(kn[14],0),eq(kn[15],0),eq(kn[16],0))) </intension>
    <intension> imp(eq(kp[16],1),and(eq(kn[1],0),eq(kn[2],0),eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[6],0),eq(kn[7],0),eq(kn[8],0),eq(kn[9],0),eq(kn[10],0),eq(kn[12],0),eq(kn[13],0),eq(kn[14],0),eq(kn[15],0),eq(kn[16],0),eq(kn[17],0),eq(kn[18],0))) </intension>
    <intension> imp(eq(kp[17],1),and(eq(kn[1],0),eq(kn[2],0),eq(kn[3],0),eq(kn[4],0),eq(kn[5],0),eq(kn[7],0),eq(kn[8],0),eq(kn[9],0),eq(kn[10],0),eq(kn[11],0),eq(kn[12],0),eq(kn[13],0),eq(kn[14],0),eq(kn[15],0),eq(kn[16],0),eq(kn[17],0),eq(kn[18],0))) </intension>
    <intension> if(eq(kn[0],1),or(lo[14],lo[18],lo[17],lo[19],lo[15],lo[20],lo[16]),eq(kn[0],0)) </intension>
    <intension> if(eq(kn[1],1),or(lo[69],lo[70],lo[68]),eq(kn[1],0)) </intension>
    <intension> if(eq(kn[2],1),lo[29],eq(kn[2],0)) </intension>
    <intension> if(eq(kn[3],1),or(lo[52],lo[53],lo[54]),eq(kn[3],0)) </intension>
    <intension> if(eq(kn[4],1),or(lo[28],lo[55],lo[27]),eq(kn[4],0)) </intension>
    <intension> if(eq(kn[5],1),or(lo[3],lo[5],lo[4]),eq(kn[5],0)) </intension>
    <intension> if(eq(kn[6],1),or(lo[31],lo[30],lo[34],lo[33],lo[32]),eq(kn[6],0)) </intension>
    <intension> if(eq(kn[7],1),or(lo[41],lo[39],lo[42],lo[40]),eq(kn[7],0)) </intension>
    <intension> if(eq(kn[8],1),or(lo[58],lo[57],lo[56]),eq(kn[8],0)) </intension>
    <intension> if(eq(kn[9],1),or(lo[59],lo[60],lo[61],lo[62]),eq(kn[9],0)) </intension>
    <intension> if(eq(kn[10],1),or(lo[46],lo[44],lo[45],lo[43],lo[47]),eq(kn[10],0)) </intension>
    <intension> if(eq(kn[11],1),or(lo[7],lo[6],lo[8],lo[9]),eq(kn[11],0)) </intension>
    <intension> if(eq(kn[12],1),or(lo[65],lo[66],lo[67]),eq(kn[12],0)) </intension>
    <intension> if(eq(kn[13],1),or(lo[10],lo[13],lo[12],lo[11]),eq(kn[13],0)) </intension>
    <intension> if(eq(kn[14],1),or(lo[50],lo[49],lo[48],lo[51]),eq(kn[14],0)) </intension>
    <intension> if(eq(kn[15],1),or(lo[0],lo[1],lo[2]),eq(kn[15],0)) </intension>
    <intension> if(eq(kn[16],1),lo[71],eq(kn[16],0)) </intension>
    <intension> if(eq(kn[17],1),or(lo[38],lo[37],lo[36],lo[35]),eq(kn[17],0)) </intension>
    <intension> if(eq(kn[18],1),or(lo[64],lo[63]),eq(kn[18],0)) </intension>
    <intension> if(eq(kn[19],1),or(lo[26],lo[21],lo[22],lo[23],lo[24],lo[25]),eq(kn[19],0)) </intension>
    <sum>
      <list> lo[] kn[] </list>
      <coeffs> 1x72 -1x20 </coeffs>
      <condition> (eq,0) </condition>
    </sum>
    <sum note="The sum of the learning objects cannot exceed the max time">
      <list> lo[] </list>
      <coeffs> 31000 39500 90000 58200 52500 36500 96900 15200 76500 77800 71300 76300 64800 30700 175000 112700 74700 22900 16700 57300 117700 71700 98300 124000 135000 88800 142700 84700 54700 28500 123800 56000 80200 49500 40000 75000 50500 68500 41300 371000 79000 23800 57500 83800 19300 46300 130700 113300 96800 86100 25700 84300 31300 42300 69700 21800 80700 186700 57500 129000 27200 21200 63200 74300 31000 23100 50000 50500 47200 207000 116500 25400 </coeffs>
      <condition> (le,400000) </condition>
    </sum>
    <sum>
      <list> lo[] </list>
      <coeffs> 18 18 9 18 3 13 18 18 13 13 18 8 13 13 19 18 9 18x4 8x4 3 9 3 18x4 3x3 8 9 19 19 8 3 8 3 18x3 19 13 18x3 10 19 8 8 13 13 18 18 20 13 7 2 9 9 18 18 13 18 20 19 18 </coeffs>
      <condition> (eq,adaptivity_score) </condition>
    </sum>
  </constraints>
  <objectives>
    <maximize> adaptivity_score </maximize>
  </objectives>
</instance>
