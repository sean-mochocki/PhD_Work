<instance format="XCSP3" type="COP">
  <variables>
    <array id="kn" note="All necessary variables for XCSP3 are defined, begin creating XCSP3 file - Create a variable that defines the knowledge nodes to be covered" size="[20]"> 0 1 </array>
    <array id="lo" note="Create a variable that defines the available Learning Objects" size="[69]"> 0 1 </array>
    <array id="kp" note="Create a variable that defines the knowledge paths available" size="[10]"> 0 1 </array>
    <var id="adaptivity_score" note="# The goal of this next section is to define an adaptivity score that we can maximize."> 0..4999 </var>
  </variables>
  <constraints>
    <intension> eq(add(kp[0],kp[1],kp[2],kp[3],kp[4],kp[5],kp[6],kp[7],kp[8],kp[9]),1) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[5],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[5],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[5],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[5],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[5],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[5],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[5],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[5],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[5],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[5],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[6],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[19],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[17],0)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[18],0)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[11],0)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[12],0)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[16],0)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[9],0)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[7],0)) </intension>
    <intension> imp(eq(kp[8],1),and(eq(kn[17],0),eq(kn[18],0))) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[3],0)) </intension>
    <intension> or(ne(kn[0],1),lo[13],lo[14],lo[15],lo[16]) </intension>
    <intension> or(eq(kn[0],1),eq(kn[0],0)) </intension>
    <intension> or(ne(kn[1],1),lo[63],lo[64],lo[65],lo[66]) </intension>
    <intension> or(eq(kn[1],1),eq(kn[1],0)) </intension>
    <intension> or(ne(kn[2],1),lo[21],lo[23],lo[24]) </intension>
    <intension> or(eq(kn[2],1),eq(kn[2],0)) </intension>
    <intension> or(ne(kn[3],1),lo[48],lo[49],lo[50],lo[51]) </intension>
    <intension> or(eq(kn[3],1),eq(kn[3],0)) </intension>
    <intension> or(ne(kn[4],1),lo[20],lo[22],lo[41],lo[52]) </intension>
    <intension> or(eq(kn[4],1),eq(kn[4],0)) </intension>
    <intension> or(ne(kn[5],1),lo[4],lo[5],lo[6],lo[19]) </intension>
    <intension> or(eq(kn[5],1),eq(kn[5],0)) </intension>
    <intension> or(ne(kn[6],1),lo[25],lo[26],lo[27],lo[28]) </intension>
    <intension> or(eq(kn[6],1),eq(kn[6],0)) </intension>
    <intension> or(ne(kn[7],1),lo[34],lo[35],lo[36]) </intension>
    <intension> or(eq(kn[7],1),eq(kn[7],0)) </intension>
    <intension> or(ne(kn[8],1),lo[53],lo[54]) </intension>
    <intension> or(eq(kn[8],1),eq(kn[8],0)) </intension>
    <intension> or(ne(kn[9],1),lo[55],lo[56]) </intension>
    <intension> or(eq(kn[9],1),eq(kn[9],0)) </intension>
    <intension> or(ne(kn[10],1),lo[37],lo[38],lo[39],lo[40]) </intension>
    <intension> or(eq(kn[10],1),eq(kn[10],0)) </intension>
    <intension> or(ne(kn[11],1),lo[7],lo[8]) </intension>
    <intension> or(eq(kn[11],1),eq(kn[11],0)) </intension>
    <intension> or(ne(kn[12],1),lo[60],lo[61],lo[62]) </intension>
    <intension> or(eq(kn[12],1),eq(kn[12],0)) </intension>
    <intension> or(ne(kn[13],1),lo[9],lo[10],lo[11],lo[12]) </intension>
    <intension> or(eq(kn[13],1),eq(kn[13],0)) </intension>
    <intension> or(ne(kn[14],1),lo[42],lo[43],lo[44],lo[45],lo[46],lo[47]) </intension>
    <intension> or(eq(kn[14],1),eq(kn[14],0)) </intension>
    <intension> or(ne(kn[15],1),lo[0],lo[1],lo[2],lo[3]) </intension>
    <intension> or(eq(kn[15],1),eq(kn[15],0)) </intension>
    <intension> or(ne(kn[16],1),lo[67],lo[68]) </intension>
    <intension> or(eq(kn[16],1),eq(kn[16],0)) </intension>
    <intension> or(ne(kn[17],1),lo[29],lo[30],lo[31],lo[32],lo[33]) </intension>
    <intension> or(eq(kn[17],1),eq(kn[17],0)) </intension>
    <intension> or(ne(kn[18],1),lo[57],lo[58],lo[59]) </intension>
    <intension> or(eq(kn[18],1),eq(kn[18],0)) </intension>
    <intension> or(ne(kn[19],1),lo[17],lo[18]) </intension>
    <intension> or(eq(kn[19],1),eq(kn[19],0)) </intension>
    <sum>
      <list> lo[] kn[] </list>
      <coeffs> 1x69 -1x20 </coeffs>
      <condition> (eq,0) </condition>
    </sum>
    <sum note="The sum of the learning objects cannot exceed the max time">
      <list> lo[] </list>
      <coeffs> 31000 41200 39500 90000 58200 52500 36500 15200 76500 71300 76300 64800 30700 74700 22900 16700 57300 71700 88800 66300 84700 425700 54700 177500 28500 56000 80200 49500 40000 206000 75000 50500 68500 41300 79000 23800 57500 83800 19300 46300 113300 124700 96800 86100 25700 98000 84300 136800 31300 181700 42300 69700 21800 80700 57500 27200 21200 84400 74300 31000 23100 50000 50500 493700 47200 207000 116500 25400 49500 </coeffs>
      <condition> (le,1200000) </condition>
    </sum>
    <sum>
      <list> lo[] </list>
      <coeffs> 6x3 15 6 20 10 6 10 6 16 10 10 15 6x3 16 20 6 20 17 6 5 16 6 20x3 6 6 5x3 10 6 10 6x3 10 10 6x4 3 13 5 13 6 6 10 20 16 10 8 6 5 5 6 6 10 13 6 3 5 6 10 </coeffs>
      <condition> (eq,adaptivity_score) </condition>
    </sum>
  </constraints>
  <objectives>
    <maximize> adaptivity_score </maximize>
  </objectives>
</instance>
