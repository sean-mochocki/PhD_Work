<instance format="XCSP3" type="COP">
  <variables>
    <array id="kn" note="All necessary variables for XCSP3 are defined, begin creating XCSP3 file - Create a variable that defines the knowledge nodes to be covered" size="[20]"> 0 1 </array>
    <array id="lo" note="Create a variable that defines the available Learning Objects" size="[53]"> 0 1 </array>
    <array id="kp" note="Create a variable that defines the knowledge paths available" size="[10]"> 0 1 </array>
    <var id="adaptivity_score" note="# The goal of this next section is to define an adaptivity score that we can maximize."> 0..4999 </var>
  </variables>
  <constraints>
    <intension> eq(add(kp[0],kp[1],kp[2],kp[3],kp[4],kp[5],kp[6],kp[7],kp[8],kp[9]),1) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[0],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[1],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[2],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[3],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[4],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[17],1)) </intension>
    <intension> imp(eq(kp[5],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[6],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[13],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[7],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[12],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[8],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[0],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[1],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[2],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[3],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[4],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[7],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[8],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[9],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[10],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[11],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[14],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[15],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[16],1)) </intension>
    <intension> imp(eq(kp[9],1),eq(kn[18],1)) </intension>
    <intension> imp(eq(kp[0],1),and(eq(kn[1],0),eq(kn[3],0),eq(kn[5],0),eq(kn[6],0),eq(kn[12],0),eq(kn[19],0))) </intension>
    <intension> imp(eq(kp[1],1),and(eq(kn[1],0),eq(kn[3],0),eq(kn[5],0),eq(kn[6],0),eq(kn[10],0),eq(kn[19],0))) </intension>
    <intension> imp(eq(kp[2],1),and(eq(kn[1],0),eq(kn[3],0),eq(kn[5],0),eq(kn[6],0),eq(kn[11],0),eq(kn[19],0))) </intension>
    <intension> imp(eq(kp[3],1),and(eq(kn[1],0),eq(kn[3],0),eq(kn[5],0),eq(kn[6],0),eq(kn[16],0),eq(kn[19],0))) </intension>
    <intension> imp(eq(kp[4],1),and(eq(kn[2],0),eq(kn[4],0),eq(kn[5],0),eq(kn[6],0),eq(kn[10],0),eq(kn[12],0),eq(kn[19],0))) </intension>
    <intension> imp(eq(kp[5],1),and(eq(kn[2],0),eq(kn[4],0),eq(kn[5],0),eq(kn[6],0),eq(kn[10],0),eq(kn[16],0),eq(kn[19],0))) </intension>
    <intension> imp(eq(kp[6],1),and(eq(kn[5],0),eq(kn[6],0),eq(kn[10],0),eq(kn[13],0),eq(kn[17],0),eq(kn[19],0))) </intension>
    <intension> imp(eq(kp[7],1),and(eq(kn[5],0),eq(kn[6],0),eq(kn[14],0),eq(kn[16],0),eq(kn[17],0),eq(kn[19],0))) </intension>
    <intension> imp(eq(kp[8],1),and(eq(kn[5],0),eq(kn[6],0),eq(kn[13],0),eq(kn[16],0),eq(kn[17],0),eq(kn[19],0))) </intension>
    <intension> imp(eq(kp[9],1),and(eq(kn[5],0),eq(kn[6],0),eq(kn[12],0),eq(kn[13],0),eq(kn[17],0),eq(kn[19],0))) </intension>
    <intension> or(ne(kn[0],1),lo[16],lo[15]) </intension>
    <intension> or(eq(kn[0],1),eq(kn[0],0)) </intension>
    <intension> or(ne(kn[1],1),lo[50]) </intension>
    <intension> or(eq(kn[1],1),eq(kn[1],0)) </intension>
    <intension> or(ne(kn[2],1),lo[21]) </intension>
    <intension> or(eq(kn[2],1),eq(kn[2],0)) </intension>
    <intension> or(ne(kn[3],1),lo[38],lo[37]) </intension>
    <intension> or(eq(kn[3],1),eq(kn[3],0)) </intension>
    <intension> or(ne(kn[4],1),lo[20],lo[39]) </intension>
    <intension> or(eq(kn[4],1),eq(kn[4],0)) </intension>
    <intension> or(ne(kn[5],1),lo[3],lo[19],lo[2],lo[6],lo[5],lo[4]) </intension>
    <intension> or(eq(kn[5],1),eq(kn[5],0)) </intension>
    <intension> or(ne(kn[6],1),lo[22],lo[24],lo[23]) </intension>
    <intension> or(eq(kn[6],1),eq(kn[6],0)) </intension>
    <intension> or(ne(kn[7],1),lo[29]) </intension>
    <intension> or(eq(kn[7],1),eq(kn[7],0)) </intension>
    <intension> or(ne(kn[8],1),lo[40]) </intension>
    <intension> or(eq(kn[8],1),eq(kn[8],0)) </intension>
    <intension> or(ne(kn[9],1),lo[43],lo[42],lo[41]) </intension>
    <intension> or(eq(kn[9],1),eq(kn[9],0)) </intension>
    <intension> or(ne(kn[10],1),lo[31],lo[32],lo[30]) </intension>
    <intension> or(eq(kn[10],1),eq(kn[10],0)) </intension>
    <intension> or(ne(kn[11],1),lo[8],lo[7],lo[9],lo[10]) </intension>
    <intension> or(eq(kn[11],1),eq(kn[11],0)) </intension>
    <intension> or(ne(kn[12],1),lo[47],lo[48],lo[49]) </intension>
    <intension> or(eq(kn[12],1),eq(kn[12],0)) </intension>
    <intension> or(ne(kn[13],1),lo[12],lo[11],lo[14],lo[13]) </intension>
    <intension> or(eq(kn[13],1),eq(kn[13],0)) </intension>
    <intension> or(ne(kn[14],1),lo[35],lo[34],lo[33],lo[36]) </intension>
    <intension> or(eq(kn[14],1),eq(kn[14],0)) </intension>
    <intension> or(ne(kn[15],1),lo[0],lo[1]) </intension>
    <intension> or(eq(kn[15],1),eq(kn[15],0)) </intension>
    <intension> or(ne(kn[16],1),lo[51],lo[52]) </intension>
    <intension> or(eq(kn[16],1),eq(kn[16],0)) </intension>
    <intension> or(ne(kn[17],1),lo[25],lo[26],lo[28],lo[27]) </intension>
    <intension> or(eq(kn[17],1),eq(kn[17],0)) </intension>
    <intension> or(ne(kn[18],1),lo[44],lo[46],lo[45]) </intension>
    <intension> or(eq(kn[18],1),eq(kn[18],0)) </intension>
    <intension> or(ne(kn[19],1),lo[17],lo[18]) </intension>
    <intension> or(eq(kn[19],1),eq(kn[19],0)) </intension>
    <sum>
      <list> lo[] kn[] </list>
      <coeffs> 1x53 -1x20 </coeffs>
      <condition> (eq,0) </condition>
    </sum>
    <sum note="The sum of the learning objects cannot exceed the max time">
      <list> lo[] </list>
      <coeffs> 31000 39500 97500 58200 52500 36500 85200 96900 15200 76500 77800 71300 76300 64800 30700 22900 16700 71700 88800 66300 54700 28500 56000 49500 40000 75000 50500 68500 41300 23800 83800 19300 46300 96800 86100 25700 84300 31300 42300 21800 57500 27200 21200 63200 84400 74300 31000 23100 50000 50500 47200 25400 49500 </coeffs>
      <condition> (le,400000) </condition>
    </sum>
    <sum>
      <list> lo[] </list>
      <coeffs> 26 26 16 16 5 5 7 16 16 5 5 16 26 5 5 16 16 26 15 16 16 16 16 15 15 26 13 3 3 26 16 16 16 26 26 26 9 3 26 5 16 5 12 18 26 13 13 16 16 5 16 16 5 </coeffs>
      <condition> (eq,adaptivity_score) </condition>
    </sum>
  </constraints>
  <objectives>
    <maximize> adaptivity_score </maximize>
  </objectives>
</instance>
